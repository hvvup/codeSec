###1
### TODO 저장 (PUT)
PUT http://localhost:3000/todos/user123?name=shopping&text=Buy%20milk

### TODO 목록 조회 (GET)
GET http://localhost:3000/todos/user123

###2
### 댓글 추가하기 (POST)
POST http://localhost:3000/comment/post1
Content-Type: application/json

{
  "username": "alice",
  "text": "Hello world!"
}

### 특정 게시글 댓글 조회하기 (GET)
GET http://localhost:3000/comment/post1

###3
### 설정 저장하기 (POST)
POST http://localhost:3000/settings/user123
Content-Type: application/json

{
  "settingKey": "theme",
  "settingValue": "dark"
}

### 설정 조회하기 (GET)
GET http://localhost:3000/settings/user123

###4
### 설문 답변 저장 (POST)
POST http://localhost:3000/survey/survey123
Content-Type: application/json

{
  "userId": "user42",
  "answers": {
    "q1": "Yes",
    "q2": "No",
    "q3": {
      "subq": "Maybe"
    }
  }
}

### 설문 결과 조회 (GET)
GET http://localhost:3000/survey/survey123

###5
### 장바구니에 아이템 추가 (POST)
POST http://localhost:3000/cart/session123
Content-Type: application/json

{
  "itemId": "item567",
  "quantity": 3
}

### 세션 장바구니 조회 (GET)
GET http://localhost:3000/cart/session123


###sec6### 1. Valid Request (Should succeed)
POST http://localhost:3000/chat/secure-room
Content-Type: application/json

{
  "username": "alice",
  "message": "Hello"
}

### Expected: 201 Created


### 2. Prototype Pollution via Room ID (Should be blocked)
POST http://localhost:3000/chat/__proto__
Content-Type: application/json

{
  "username": "user1",
  "message": "Pollution attempt"
}

### Expected: 403 Forbidden


### 3. Prototype Pollution via Username (Should be blocked)
POST http://localhost:3000/chat/room1
Content-Type: application/json

{
  "username": "constructor",
  "message": "Another pollution attempt"
}

### Expected: 403 Forbidden


### 4. Invalid Room ID Format (Should fail validation)
POST http://localhost:3000/chat/invalid!room
Content-Type: application/json

{
  "username": "bob",
  "message": "Testing room validation"
}

### Expected: 400 Bad Request


### 5. Missing Required Field (Should fail validation)
POST http://localhost:3000/chat/room1
Content-Type: application/json

{
  "message": "No username provided"
}

### Expected: 400 Bad Request


### 6. GET Request Verification (Check storage works)
GET http://localhost:3000/chat/secure-room

### Expected: 200 OK with Alice's message

###sec7
### 1. Valid Request (Sanity Check)
POST http://localhost:3000/ratings/movie1
Content-Type: application/json

{
  "username": "safe_user",
  "stars": 4
}

# Expected: 201 Created


### 2. Prototype Pollution via Username (CWE-915)
POST http://localhost:3000/ratings/movie1
Content-Type: application/json

{
  "username": "__proto__",
  "stars": 5
}

# Expected: 400 Bad Request


### 3. Prototype Pollution via Movie ID (CWE-400)### 수정 후 재테스트 (400 나와야 함)
POST http://localhost:3000/ratings/__proto__
Content-Type: application/json

{
  "username": "user2",
  "stars": 3
}

# Expected: 400 Bad Request (Unsafe movieId)


### 4. Constructor Pollution Attempt (CWE-471)
POST http://localhost:3000/ratings/movie1
Content-Type: application/json

{
  "username": "constructor",
  "stars": 2
}

# Expected: 400 Bad Request


### 5. Invalid Star Rating (CWE-94)
POST http://localhost:3000/ratings/movie1
Content-Type: application/json

{
  "username": "user3",
  "stars": "malicious"
}

# Expected: 400 Bad Request


### 6. Missing Required Field
POST http://localhost:3000/ratings/movie1
Content-Type: application/json

{
  "stars": 3
}

# Expected: 400 Bad Request

###sec8
### 1. Valid Request (200 OK)
POST http://localhost:3000/vote/poll123
Content-Type: application/json

{
  "userId": "user456",
  "choice": "optionA"
}

### 2. Prototype Pollution via userId (400 Bad Request)
POST http://localhost:3000/vote/poll123
Content-Type: application/json

{
  "userId": "__proto__",
  "choice": "optionA"
}

### 3. Prototype Pollution via pollId (400 Bad Request)
POST http://localhost:3000/vote/__proto__
Content-Type: application/json

{
  "userId": "user456",
  "choice": "optionA"
}

### 4. Constructor Property Attack (400 Bad Request)
POST http://localhost:3000/vote/constructor
Content-Type: application/json

{
  "userId": "user456",
  "choice": "optionA"
}

### 5. Nested Prototype Pollution Attempt (400 Bad Request)
POST http://localhost:3000/vote/poll123
Content-Type: application/json

{
  "userId": "user456",
  "choice": {"__proto__": {"polluted": true}}
}

### 6. Missing Required Field (400 Bad Request)
POST http://localhost:3000/vote/poll123
Content-Type: application/json

{
  "choice": "optionA"
}

### 7. Type Confusion Attack (400 Bad Request)
POST http://localhost:3000/vote/poll123
Content-Type: application/json

{
  "userId": 12345,
  "choice": "optionA"
}

###sec9
### 정상 요청
PUT http://localhost:3000/translate/ko
Content-Type: application/json

{
  "phraseKey": "welcome",
  "translation": "환영합니다"
}

### 비정상 요청 (400 Bad Request 예상)
PUT http://localhost:3000/translate/!!
Content-Type: application/json

{
  "phraseKey": "invalid key!",
  "translation": "테스트"
}

### 서버 상태 확인
GET http://localhost:3000/health
### 1. 가장 간단한 요청으로 테스트
PUT http://localhost:3000/translate/ko
Content-Type: application/json

{
  "phraseKey": "test1",
  "translation": "테스트"
}

### 2. 서버 상태 확인
GET http://localhost:3000/health
### 1. Valid Request - Should work (201 Created)
PUT http://localhost:3000/translate/en
Content-Type: application/json

{
  "phraseKey": "welcome",
  "translation": "Hello"
}

> {%
    client.test("Valid request works", function() {
        client.assert(response.status === 201, "Expected 201 Created");
    });
%}

### 2. Prototype Pollution via PhraseKey - Must block (400 Bad Request)
PUT http://localhost:3000/translate/en
Content-Type: application/json

{
  "phraseKey": "__proto__",
  "translation": "polluted"
}

> {%
    client.test("Block __proto__ pollution", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request");
    });
%}

### 3. Prototype Pollution via Language Param - Must block (400 Bad Request)
PUT http://localhost:3000/translate/__proto__
Content-Type: application/json

{
  "phraseKey": "test",
  "translation": "polluted"
}

> {%
    client.test("Block language param pollution", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request");
    });
%}

### 4. Constructor Pollution - Must block (400 Bad Request)
PUT http://localhost:3000/translate/en
Content-Type: application/json

{
  "phraseKey": "constructor",
  "translation": "polluted"
}

> {%
    client.test("Block constructor pollution", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request");
    });
%}

### 5. Malicious Script in Input - Must block (400 Bad Request)
PUT http://localhost:3000/translate/en
Content-Type: application/json

{
  "phraseKey": "<script>alert(1)</script>",
  "translation": "xss"
}

> {%
    client.test("Block XSS attempts", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request");
    });
%}

###sec10
### Test 1: Valid Note Creation
POST http://localhost:3000/notes/user123
Content-Type: application/json

{
  "noteId": "note1",
  "content": "This is a test note"
}

### Expected: 201 Created


### Test 2: Missing Required Fields
POST http://localhost:3000/notes/user123
Content-Type: application/json

{
  "content": "Missing noteId"
}

### Expected: 400 Bad Request


### Test 3: Dangerous Key - __proto__
POST http://localhost:3000/notes/user123
Content-Type: application/json

{
  "noteId": "__proto__",
  "content": "Malicious payload"
}

### Expected: 400 Bad Request


### Test 4: Dangerous Key - constructor
POST http://localhost:3000/notes/user123
Content-Type: application/json

{
  "noteId": "constructor",
  "content": "Malicious payload"
}

### Expected: 400 Bad Request


### Test 5: Dangerous Key - prototype
POST http://localhost:3000/notes/user123
Content-Type: application/json

{
  "noteId": "prototype",
  "content": "Malicious payload"
}

### Expected: 400 Bad Request


### Test 6: Overly Long User ID
POST http://localhost:3000/notes/this-is-an-extremely-long-user-id-that-exceeds-the-maximum-allowed-length-of-100-characters-designed-to-test-input-validation
Content-Type: application/json

{
  "noteId": "note1",
  "content": "Test content"
}

### Expected: 400 Bad Request


### Test 7: Overly Long Note ID
POST http://localhost:3000/notes/user123
Content-Type: application/json

{
  "noteId": "this-is-an-extremely-long-note-id-that-exceeds-the-maximum-allowed-length-of-100-characters-designed-to-test-input-validation",
  "content": "Test content"
}

### Expected: 400 Bad Request


