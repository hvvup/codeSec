###fix6
### 1. Test valid markdown conversion
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "# Hello World\nThis is **bold** text"
}

### Expected: 200 OK with sanitized HTML
### Tests: Normal functionality with proper markdown input


### 2. Test empty content
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": ""
}

### Expected: 400 Bad Request
### Tests: Empty content validation


### 3. Test missing content field
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "otherField": "value"
}

### Expected: 400 Bad Request
### Tests: Required field validation


### 4. Test non-string content
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": 12345
}

### Expected: 400 Bad Request
### Tests: Type validation


### 5. Test XSS attempt in markdown
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "<script>alert('XSS')</script>"
}

### Expected: 200 OK with sanitized HTML (script tags removed)
### Tests: HTML sanitization (CWE-079)


### 6. Test JavaScript injection in content
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "```js\nconsole.log('malicious code')\n```"
}

### Expected: 200 OK with sanitized HTML (code block rendered safely)
### Tests: Code block sanitization (CWE-094)


### 7. Test invalid JSON body
POST http://localhost:3000/markdown
Content-Type: application/json

This is not valid JSON

### Expected: 400 Bad Request
### Tests: Invalid request handling


### 8. Test prototype pollution attempt
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "normal content",
  "__proto__": {"polluted": true}
}

### Expected: 200 OK (prototype pollution attempt ignored)
### Tests: Object prototype protection (CWE-400)


### 9. Test extremely large input
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "A".repeat(1000000)
}

### Expected: Either 200 OK (if within limits) or 429 Too Many Requests
### Tests: Input size limits and rate limiting


### 10. Test content with dangerous HTML attributes
POST http://localhost:3000/markdown
Content-Type: application/json

{
  "content": "<a href=\"javascript:alert('XSS')\">Click me</a>"
}

### Expected: 200 OK with sanitized HTML (javascript: removed)
### Tests: Attribute sanitization (CWE-095)

###fix7
### 1. Test XSS Protection (CWE-079) - Should escape HTML tags
POST http://localhost:3000/email
Content-Type: application/json

{
  "name": "<script>alert('xss')</script>",
  "message": "<img src=x onerror=alert(1)>"
}

### Expected: 200 OK with escaped HTML (not executed)
### The response should show the script tags as text, not execute them


### 2. Test Safe Math Calculation (Valid Input)
POST http://localhost:3000/email
Content-Type: application/json

{
  "calc": "(2 + 2) * 3"
}

### Expected: 200 OK with "Calculation result: 12"


### 3. Test Math Calculation Injection (CWE-094) - Invalid chars
POST http://localhost:3000/email
Content-Type: application/json

{
  "calc": "process.exit(1)"
}

### Expected: 400 Bad Request - "Invalid calculation input"


### 4. Test Math Calculation Injection (CWE-094) - Malicious JS
POST http://localhost:3000/email
Content-Type: application/json

{
  "calc": "require('child_process').exec('rm -rf /')"
}

### Expected: 400 Bad Request - "Invalid calculation input"


### 5. Test VM Sandbox Execution (Valid Input)
GET http://localhost:3000/execute?code=2+2

### Expected: 200 OK with "Result: 4"


### 6. Test VM Sandbox Escape (CWE-095) - Try to access require
GET http://localhost:3000/execute?code=require('fs')

### Expected: 400 Bad Request - "Error executing code"
### Should fail because require is not in the sandbox context


### 7. Test VM Sandbox Escape (CWE-095) - Try prototype pollution
GET http://localhost:3000/execute?code=Object.prototype.polluted='yes'

### Expected: 400 Bad Request - "Error executing code"
### Should fail due to strict mode or context restrictions


### 8. Test Output Encoding (CWE-116) - Verify HTML escaping
GET http://localhost:3000/execute?code='"<script>alert(1)</script>"'

### Expected: 200 OK with "Result: &lt;script&gt;alert(1)&lt;/script&gt;"
### The angle brackets should be HTML-encoded


### 9. Test Empty Input Cases
POST http://localhost:3000/email
Content-Type: application/json

{}

### Expected: 200 OK with "No input provided"


### 10. Test Missing Code Parameter
GET http://localhost:3000/execute

### Expected: 400 Bad Request - "No code provided"

### 5. Test Simple Calculation (수정)
GET http://localhost:3000/execute?code=2%2B2  # URL encoded 2+2

### Expected: 200 OK with "Result: 4"


### 7. Test Prototype Pollution Attempt (수정)
GET http://localhost:3000/execute?code=Object.prototype.test%3D123

### Expected: 400 Bad Request - "Invalid code pattern"

###fix8
### Test 1: Normal message display
GET http://localhost:3000/response?msg=Hello%20World
Accept: text/html
# Expected: 200 OK with escaped HTML containing "Hello World"

### Test 2: XSS attempt in message parameter
GET http://localhost:3000/response?msg=<script>alert(1)</script>
Accept: text/html
# Expected: 200 OK with script tags properly escaped

### Test 3: Basic calculation
GET http://localhost:3000/calculate?formula=2*%283+4%29
Accept: application/json
# Expected: 200 OK with {"result":14}

### Test 4: Malicious formula attempt
GET http://localhost:3000/calculate?formula=process.exit(1)
Accept: application/json
# Expected: 400 Bad Request (blocked by safeCalculate regex)

### Test 5: Formula with invalid characters
GET http://localhost:3000/calculate?formula=alert('xss')
Accept: application/json
# Expected: 400 Bad Request

### Test 6: Safe HTML rendering
POST http://localhost:3000/render
Content-Type: text/plain

<p>Safe content</p>

# Expected: 200 OK with escaped HTML content

### Test 7: XSS attempt in POST body
POST http://localhost:3000/render
Content-Type: text/plain

<script>alert(1)</script>
# Expected: 200 OK with script tags properly escaped

### Test 8: Missing parameters (default handling)
GET http://localhost:3000/response
Accept: text/html
# Expected: 200 OK with "No message provided"

### Test 9: Missing formula parameter
GET http://localhost:3000/calculate
Accept: application/json
# Expected: 200 OK with {"result":2} (default 1+1)

### Test 10: Invalid content type for /render
POST http://localhost:3000/render
Content-Type: application/json

{"test":"value"}
# Expected: Likely 415 Unsupported Media Type or similar error

### Test 11: Extremely long input
GET http://localhost:3000/response?msg=AAAAAAAAAAAAAAAA...[10000+ chars]
Accept: text/html
# Expected: 200 OK with truncated or fully escaped content

### Test 12: Special characters in formula
GET http://localhost:3000/calculate?formula=2*%28-3.5%29
Accept: application/json
# Expected: 200 OK with {"result":-7}

### fix9
### 1. Test normal functionality
GET http://localhost:3000/log?query=ERROR
Accept: application/json
# Expected: 200 OK with filtered ERROR logs

### 2. Test with calculation
GET http://localhost:3000/log?query=INFO&code=2*3
Accept: application/json
# Expected: 200 OK with calculation result = 6 + query length

### 3. Test XSS attempt in query parameter
GET http://localhost:3000/log?query=<script>alert(1)</script>
Accept: application/json
# Expected: 200 OK with escaped HTML (should NOT execute script)

### 4. Test code injection in calculation
GET http://localhost:3000/log?query=test&code=process.exit(1)
Accept: application/json
# Expected: 200 OK with fallback to query length (invalid code blocked)

### 5. Test raw output mode
GET http://localhost:3000/log?query=<b>test</b>&raw=true
Accept: text/html
# Expected: 200 OK with escaped HTML (should show literal <b>test</b>)

### 6. Test regex injection attempt
GET http://localhost:3000/log?query=.*
Accept: application/json
# Expected: 200 OK with properly escaped regex pattern

### 7. Test JavaScript context injection
GET http://localhost:3000/log?query=';alert(1);//
Accept: application/json
# Expected: 200 OK with properly JSON-escaped string in script tag

### 8. Test invalid code pattern
GET http://localhost:3000/log?query=test&code=require('child_process').exec('rm -rf /')
Accept: application/json
# Expected: 200 OK with fallback to query length (malicious code blocked)

### 9. Test prototype pollution attempt
GET http://localhost:3000/log?query=__proto__&code=this.constructor.constructor('return process')()
Accept: application/json
# Expected: 200 OK with fallback to query length (attack blocked)

### 10. Test extremely long input
GET http://localhost:3000/log?query=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Accept: application/json
# Expected: 200 OK (should handle long input without crashing)

###fix10
### Health Check - Should always work
GET http://localhost:3000/health HTTP/1.1
# Expected: 200 OK

### Test valid template rendering
POST http://localhost:3000/page HTTP/1.1
Content-Type: application/json

{
    "section": "test",
    "rawContent": "Safe content"
}

# Expected: 200 OK with rendered template

### Test safe HTML output with escaping
POST http://localhost:3000/page HTTP/1.1
Content-Type: application/json

{
    "unsafeHtml": "<script>alert('xss')</script>"
}

# Expected: 200 OK with escaped HTML (should show the script tags as text)

### Test blocked dynamic require (CWE-094)
POST http://localhost:3000/page HTTP/1.1
Content-Type: application/json

{
    "dynamicCode": "fs"
}

# Expected: 400 Bad Request - Dynamic module loading not allowed

### Test blocked eval injection (CWE-095)
POST http://localhost:3000/page HTTP/1.1
Content-Type: application/json

{
    "calc": "process.exit(1)"
}

# Expected: 400 Bad Request - Dynamic evaluation not allowed

### Test blocked dynamic function execution (CWE-094)
GET http://localhost:3000/execute?funcBody=return%20process.env&param=test HTTP/1.1
# Expected: 400 Bad Request - Dynamic function execution not allowed

### Test XSS protection in template rendering (CWE-079, CWE-116)
POST http://localhost:3000/page HTTP/1.1
Content-Type: application/json

{
    "section": "<script>alert(1)</script>",
    "rawContent": "<script>alert(1)</script>"
}
# Expected: 200 OK with properly escaped content in the template

### Test HTML injection attempt
POST http://localhost:3000/page HTTP/1.1
Content-Type: application/json

{
    "unsafeHtml": "<img src=x onerror=alert(1)>"
}
# Expected: 200 OK with escaped HTML (onerror should be rendered as text)

### Test command injection attempt
POST http://localhost:3000/page HTTP/1.1
Content-Type: application/json

{
    "calc": "require('child_process').execSync('rm -rf /')"
}
# Expected: 400 Bad Request - Dynamic evaluation not allowed

### Test path traversal via dynamic require
POST http://localhost:3000/page HTTP/1.1
Content-Type: application/json

{
    "dynamicCode": "../../../etc/passwd"
}
# Expected: 400 Bad Request - Dynamic module loading not allowed